package main

import (
	"bytes"
	"html/template"
	"io/ioutil"
	"log"
	"os/exec"
	"strings"

	"myitcv.io/gogenerate"
)

type FieldType int

const (
	FieldType_Func FieldType = iota
	FieldType_Var
)

type fileOptionGen struct {
	FilePath   string
	FileName   string
	PkgName    string
	ImportPath []string

	ClassList         map[string]bool
	ClassOptionFields map[string][]optionField
}

type optionField struct {
	FieldType FieldType
	Name      string
	Type      string
	Body      string
}

type templateData struct {
	ClassOptionInfo map[string][]optionInfo
}

type optionInfo struct {
	FieldType FieldType
	Name      string
	Type      template.HTML
	Body      template.HTML
}

func (g fileOptionGen) gen() {
	needGen := false
	for _, need := range g.ClassList {
		needGen = needGen || need
	}
	if !needGen {
		return
	}

	buf := BufWrite{
		buf: bytes.NewBuffer(nil),
	}

	buf.wf("// Code generated by %v. DO NOT EDIT.\n", optionGen)
	buf.wln()
	buf.wf("package %v\n", g.PkgName)

	for _, importPath := range g.ImportPath {
		buf.wf("import %v\n", importPath)
	}

	tmp := templateData{
		ClassOptionInfo: make(map[string][]optionInfo),
	}
	for className, exist := range g.ClassList {
		if exist {
			for _, val := range g.ClassOptionFields[className] {
				tmp.ClassOptionInfo[className] = append(tmp.ClassOptionInfo[className], optionInfo{
					FieldType: val.FieldType,
					Name:      strings.Trim(val.Name, "\""),
					Type:      template.HTML(val.Type),
					Body:      template.HTML(val.Body),
				})
			}
		}
	}

	t := template.Must(template.New("tmp").Parse(templateText))

	err := t.Execute(buf.buf, tmp)
	if err != nil {
		log.Fatalf("cannot execute template: %v", err)
	}

	genName := gogenerate.NameFile(g.FileName, optionGen)

	source, err := goimportsBuf(buf.buf)
	if err != nil {
		log.Fatalln("goimports:", err.Error())
	}

	if err := ioutil.WriteFile(genName, source.Bytes(), 0644); err != nil {
		log.Fatalf("could not write %v: %v", genName, err)
	}
}

func goimportsBuf(buf *bytes.Buffer) (*bytes.Buffer, error) {
	out := bytes.NewBuffer(nil)
	cmd := exec.Command("goimports")
	cmd.Stdin = buf
	cmd.Stdout = out

	err := cmd.Run()

	return out, err
}

const templateText = `
{{- range $className, $optionList := .ClassOptionInfo }}
type {{ $className }}Options struct {
	{{- range $index, $option := $optionList }}
	{{ $option.Name }} {{ $option.Type }}
	{{- end }}
}

type {{$className}}Op func(option *{{$className}}Options)
{{ range $index, $option := $optionList }}
func {{$className}}OpWith_{{$option.Name}}(value {{$option.Type}}) {{$className}}Op   { return func(option *{{$className}}Options) {option.{{$option.Name}} = value } }
{{- end }}

func _New{{$className}}Options() {{$className}}Options {
	return {{$className}}Options{
{{- range $index, $option := $optionList }}
	{{- if eq $option.FieldType 0 }}
		{{ $option.Name }}: {{ $option.Type }} {{ $option.Body}},
	{{- else }}
		{{ $option.Name }}: {{ $option.Body}},
	{{- end }}
{{- end }}
	}
}

{{ end }}
`
